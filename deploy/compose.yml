name: banking_app

services:
  user_postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: user_dbuser
      POSTGRES_PASSWORD: user_dbpass
      POSTGRES_DB: user_dbname
    ports:
      - "5432:5432"
    volumes:
      - ../UserService/internal/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user_dbuser -d user_dbname" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal

  user_service:
    build:
      context: ../UserService
      dockerfile: ./build/Dockerfile
    container_name: user_service
    depends_on:
      user_postgres:
        condition: service_healthy
    environment:
      JWT_SECRET_KEY: "very-secret-key"
      ENV: "development"
    restart: unless-stopped
    ports:
      - "8081:8080"
      - "80:80"
    networks:
      - internal

  banking_postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: banking_dbuser
      POSTGRES_PASSWORD: banking_dbpass
      POSTGRES_DB: banking_dbname
    ports:
      - "5433:5433"
    volumes:
      - ../BankingService/internal/migrations:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U banking_dbuser -d banking_dbname" ]
      interval: 5s
      timeout: 10s
      retries: 5
      start_period: 10s
    networks:
      - internal

  banking_service:
    build:
      context: ../BankingService
      dockerfile: ./build/Dockerfile
    container_name: banking_service
    depends_on:
      banking_postgres:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8082:8080"
    networks:
      - internal

  gateway:
    build:
      context: ../Gateway
      dockerfile: ./build/Dockerfile
    container_name: gateway
    environment:
      USER_SERVICE_HTTP_URI: http://user_service:8080
      USER_SERVICE_GRPC_URI: user_service:80
      BANKING_SERVICE_URI: http://banking_service:8080
    restart: unless-stopped
    depends_on:
      gateway_redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    networks:
      - internal

  gateway_redis:
    image: redis:latest
    container_name: gateway_redis
    ports:
      - "6379:6379"
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks:
      - internal

networks:
  internal: